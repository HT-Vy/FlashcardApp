// flashcardset.js
; (async function () {
  const token = sessionStorage.getItem('token') || localStorage.getItem('token');
  if (!token) return window.location.href = 'sign-in.html';

  const headers = {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
  };

  // DOM refs
  const titleEl = document.getElementById('title');
  const descEl = document.getElementById('description');
  // const publicToggle  = document.getElementById('public');
  const cardListEl = document.getElementById('card-list');
  const submitBtn = document.querySelector('.submit-btn');
  const addCardBtn = document.querySelector('.add-card-btn');

  // helper: t·∫°o m·ªõi m·ªôt card (ho·∫∑c v·ªõi front/back c√≥ s·∫µn)
  let cardCount = 0;
  window.addCard = function (front = '', back = '') {
    cardCount++;
    const card = document.createElement('div');
    card.className = 'card';
    card.setAttribute('data-index', cardCount);
    card.innerHTML = `
        <div class="card-number">${cardCount}</div>
        <div class="term-row">
          <input type="text" placeholder="THU·∫¨T NG·ªÆ" value="${front}"/>
          <input type="text" placeholder="ƒê·ªäNH NGHƒ®A" value="${back}"/>
        </div>
        <button class="delete-button">üóë</button>
      `;
    // delete
    card.querySelector('.delete-button').addEventListener('click', () => {
      card.remove();
      // re-index
      Array.from(cardListEl.children).forEach((c, i) => {
        c.querySelector('.card-number').textContent = i + 1;
        c.setAttribute('data-index', i + 1);
      });
      cardCount = cardListEl.children.length;
    });
    cardListEl.append(card);
  };

  addCardBtn.addEventListener('click', () => addCard());

  // 1. Ki·ªÉm xem URL c√≥ ?setId= kh√¥ng ‚Üí n·∫øu c√≥: edit mode
  const params = new URLSearchParams(window.location.search);
  const setId = params.get('setId');
  if (setId) {
    // ƒëang edit: ƒë·ªïi ch·ªØ n√∫t
    submitBtn.textContent = 'L∆∞u ch·ªânh s·ª≠a';

    // fetch chi ti·∫øt v√† populate form
    const res = await fetch(`/api/sets/${setId}`, { headers });
    if (!res.ok) return alert('Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu set');
    const data = await res.json();

    // ch√∫ √Ω: n·∫øu DTO c·ªßa b·∫°n c√≥ tr∆∞·ªùng public th√¨ ƒë·ªçc data.public, 
    // n·∫øu kh√°c t√™n (vd isPublic) h√£y ƒë·ªïi l·∫°i cho ƒë√∫ng
    //   publicToggle.checked  = data.public; 
    titleEl.value = data.title;
    descEl.value = data.description;

    // x√≥a 3 card m·∫∑c ƒë·ªãnh l√∫c load
    cardListEl.innerHTML = '';
    cardCount = 0;
    // populate cards t·ª´ backend
    data.flashcards.forEach(f => addCard(f.frontContent, f.backContent));
  } else {
    // ƒëang t·∫°o m·ªõi: gi·ªØ ch·ªØ m·∫∑c ƒë·ªãnh (T·∫°o) ho·∫∑c g√°n l·∫°i cho r√µ
    submitBtn.textContent = 'T·∫°o';
    // t·∫°o m·ªõi: cho hi·ªÉn th·ªã 3 card kh·ªüi t·∫°o s·∫µn
    addCard(); addCard(); addCard();
  }

  // 2. B·∫Øt s·ª± ki·ªán submit
  submitBtn.addEventListener('click', async () => {
    // thu th·∫≠p d·ªØ li·ªáu
    const payloadSet = {
      title: titleEl.value.trim(),
      description: descEl.value.trim(),
      // public:      publicToggle.checked  // nh·ªõ DTO/controller ph·∫£i h·ªó tr·ª£
    };
    // validate
    if (!payloadSet.title) {
      return alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ');
    }
    // thu th·∫≠p flashcards
    const cards = Array.from(cardListEl.children).map(c => {
      const [inpFront, inpBack] = c.querySelectorAll('input');
      return {
        frontContent: inpFront.value.trim(),
        backContent: inpBack.value.trim()
      };
    });
    if (cards.length === 0) {
      return alert('Ph·∫£i c√≥ √≠t nh·∫•t 1 th·∫ª');
    }

    let targetSetId = setId;
    try {
      // a) T·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t set
      let res;
      if (setId) {
        res = await fetch(`/api/sets/${setId}`, {
          method: 'PUT',
          headers,
          body: JSON.stringify(payloadSet)
        });
      } else {
        res = await fetch(`/api/sets`, {
          method: 'POST',
          headers,
          body: JSON.stringify(payloadSet)
        });
      }
      if (!res.ok) throw new Error(res.statusText);
      const setData = await res.json();
      targetSetId = setData.id || setId;

      // b) G·ª≠i batch flashcards
      const batchRes = await fetch(`/api/sets/${targetSetId}/flashcards/batch`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ flashcards: cards })
      });
      if (!batchRes.ok) throw new Error('Batch API l·ªói');

      // c) Chuy·ªÉn sang trang h·ªçc
      window.location.href = `learn.html?setId=${targetSetId}`;
    } catch (e) {
      console.error(e);
      alert('C√≥ l·ªói khi l∆∞u b·ªô flashcard');
    }
  });
})();
