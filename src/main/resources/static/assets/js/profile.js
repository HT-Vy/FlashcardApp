console.log('‚úÖ profile.js loaded');

(async function(){
  const token = sessionStorage.getItem('token');
  if (!token) {
    return window.location.href = 'sign-in.html';
  }
  const headers = { 'Authorization': 'Bearer ' + token };

  let user;
  try {
    // 1) L·∫•y profile user
    const res = await fetch('/api/auth/me', { headers });
    if (!res.ok) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin user');
    user = await res.json();
    console.log('üì¶ profile user object:', user);

    // Hi·ªÉn th·ªã l√™n page
    document.getElementById('profileName').innerText      = user.fullName;
    document.getElementById('profileFullName').innerText  = user.fullName;
    document.getElementById('profileEmail').innerText     = user.email;
    document.getElementById('profileEmailDetail').innerText = user.email;
    if (user.avatarUrl) {
      document.getElementById('profileAvatar').src = user.avatarUrl;
    }

    // 2) Ch·ªâ bind c√°c event sau khi ƒë√£ c√≥ user
    const avatarInput   = document.getElementById('avatarInput');
    const fullnameInput = document.getElementById('fullnameInput');

    // M·ªü modal: ƒëi·ªÅn s·∫µn t√™n v√† clear file
    document.getElementById('editProfileBtn')
      .addEventListener('click', () => {
        fullnameInput.value = user.fullName || '';
        avatarInput.value  = '';
      });

    // Cancel: ƒë√≥ng modal
    document.getElementById('cancelProfile')
      .addEventListener('click', () => {
        bootstrap.Modal.getInstance(
          document.getElementById('editProfileModal')
        ).hide();
      });

    // Save: h·∫≥n ch·∫°y khi user ƒë√£ c√≥ id
    document.getElementById('saveProfile')
      .addEventListener('click', async () => {
        console.log('PUT to /api/auth/user/' + user.id);
        const formData = new FormData();
        formData.append('fullName', fullnameInput.value);
        if (avatarInput.files.length) {
          formData.append('avatar', avatarInput.files[0]);
        }

        try {
          const putRes = await fetch(`/api/auth/user/${user.id}`, {
            method: 'PUT',
            headers: { 'Authorization': 'Bearer ' + token },
            body: formData
          });
          if (!putRes.ok) throw new Error(await putRes.text());
          const updated = await putRes.json();

          // C·∫≠p nh·∫≠t UI
          document.getElementById('profileName').innerText      = updated.fullName;
          document.getElementById('profileFullName').innerText  = updated.fullName;
          if (updated.avatarUrl) {
            document.getElementById('profileAvatar').src = updated.avatarUrl;
          }

          // ƒê√≥ng modal
          bootstrap.Modal.getInstance(
            document.getElementById('editProfileModal')
          ).hide();
          alert('C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!');
          user = updated; // c·∫≠p nh·∫≠t l·∫°i user object
        } catch (e) {
          console.error(e);
          alert('L·ªói l∆∞u h·ªì s∆°: ' + e.message);
        }
      });

    // 3) Hi·ªÉn th·ªã c√°c b·ªô flashcard
    const container = document.getElementById('userSetsRow');
    container.innerHTML = user.flashcardSets.map(s => `
      <div class="col-xl-3 col-sm-6 mb-xl-0">
        <div class="card border shadow-xs mb-4">
          <a href="./learn.html?setId=${s.id}" class="text-decoration-none">
            <div class="card-body p-3">
              <p class="text-sm text-secondary mb-1">${s.flashcardCount || 0} th·∫ª</p>
              <h6 class="font-weight-bold mb-2">${s.title}</h6>
            </div>
          </a>
        </div>
      </div>
    `).join('');

  } catch (err) {
    console.error(err);
    alert('L·ªói t·∫£i th√¥ng tin c√° nh√¢n: ' + err.message);
    // Kh√¥ng bind ti·∫øp n·∫øu kh√¥ng c√≥ user
  }
})();
